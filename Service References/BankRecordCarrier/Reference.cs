//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Addit.AK.WBD.AK_Suche.BankRecordCarrier {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/Addit.AK.WBD.BankRecordCarrierService")]
    [System.SerializableAttribute()]
    public partial class Response : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExeptionMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResponseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseMsgField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExeptionMsg {
            get {
                return this.ExeptionMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ExeptionMsgField, value) != true)) {
                    this.ExeptionMsgField = value;
                    this.RaisePropertyChanged("ExeptionMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResponseCode {
            get {
                return this.ResponseCodeField;
            }
            set {
                if ((this.ResponseCodeField.Equals(value) != true)) {
                    this.ResponseCodeField = value;
                    this.RaisePropertyChanged("ResponseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseMsg {
            get {
                return this.ResponseMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseMsgField, value) != true)) {
                    this.ResponseMsgField = value;
                    this.RaisePropertyChanged("ResponseMsg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="V3Type", Namespace="http://schemas.datacontract.org/2004/07/Addit.AK.WBD.BankRecordCarrierService")]
    public enum V3Type : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREMUL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DEBMUL = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BankRecordCarrier.IBankRecordCarrier")]
    public interface IBankRecordCarrier {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankRecordCarrier/generateSepaAuszahlung", ReplyAction="http://tempuri.org/IBankRecordCarrier/generateSepaAuszahlungResponse")]
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response generateSepaAuszahlung(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankRecordCarrier/generateSepaAuszahlung", ReplyAction="http://tempuri.org/IBankRecordCarrier/generateSepaAuszahlungResponse")]
        System.IAsyncResult BegingenerateSepaAuszahlung(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish, System.AsyncCallback callback, object asyncState);
        
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgenerateSepaAuszahlung(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankRecordCarrier/generateSepaEinzug", ReplyAction="http://tempuri.org/IBankRecordCarrier/generateSepaEinzugResponse")]
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response generateSepaEinzug(string sessionToken, System.DateTime monat);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankRecordCarrier/generateSepaEinzug", ReplyAction="http://tempuri.org/IBankRecordCarrier/generateSepaEinzugResponse")]
        System.IAsyncResult BegingenerateSepaEinzug(string sessionToken, System.DateTime monat, System.AsyncCallback callback, object asyncState);
        
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgenerateSepaEinzug(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankRecordCarrier/getBankRecordCarriers", ReplyAction="http://tempuri.org/IBankRecordCarrier/getBankRecordCarriersResponse")]
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response getBankRecordCarriers(out string[] carriers, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankRecordCarrier/getBankRecordCarriers", ReplyAction="http://tempuri.org/IBankRecordCarrier/getBankRecordCarriersResponse")]
        System.IAsyncResult BegingetBankRecordCarriers(string sessionToken, System.AsyncCallback callback, object asyncState);
        
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgetBankRecordCarriers(out string[] carriers, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankRecordCarrier/readV3Carrier", ReplyAction="http://tempuri.org/IBankRecordCarrier/readV3CarrierResponse")]
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response readV3Carrier(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankRecordCarrier/readV3Carrier", ReplyAction="http://tempuri.org/IBankRecordCarrier/readV3CarrierResponse")]
        System.IAsyncResult BeginreadV3Carrier(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate, System.AsyncCallback callback, object asyncState);
        
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndreadV3Carrier(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankRecordCarrier/getCopyfiles", ReplyAction="http://tempuri.org/IBankRecordCarrier/getCopyfilesResponse")]
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response getCopyfiles(out string[] copies, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankRecordCarrier/getCopyfiles", ReplyAction="http://tempuri.org/IBankRecordCarrier/getCopyfilesResponse")]
        System.IAsyncResult BegingetCopyfiles(string sessionToken, System.AsyncCallback callback, object asyncState);
        
        Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgetCopyfiles(out string[] copies, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankRecordCarrierChannel : Addit.AK.WBD.AK_Suche.BankRecordCarrier.IBankRecordCarrier, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class generateSepaAuszahlungCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public generateSepaAuszahlungCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class generateSepaEinzugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public generateSepaEinzugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getBankRecordCarriersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getBankRecordCarriersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] carriers {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class readV3CarrierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public readV3CarrierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCopyfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCopyfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] copies {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankRecordCarrierClient : System.ServiceModel.ClientBase<Addit.AK.WBD.AK_Suche.BankRecordCarrier.IBankRecordCarrier>, Addit.AK.WBD.AK_Suche.BankRecordCarrier.IBankRecordCarrier {
        
        private BeginOperationDelegate onBegingenerateSepaAuszahlungDelegate;
        
        private EndOperationDelegate onEndgenerateSepaAuszahlungDelegate;
        
        private System.Threading.SendOrPostCallback ongenerateSepaAuszahlungCompletedDelegate;
        
        private BeginOperationDelegate onBegingenerateSepaEinzugDelegate;
        
        private EndOperationDelegate onEndgenerateSepaEinzugDelegate;
        
        private System.Threading.SendOrPostCallback ongenerateSepaEinzugCompletedDelegate;
        
        private BeginOperationDelegate onBegingetBankRecordCarriersDelegate;
        
        private EndOperationDelegate onEndgetBankRecordCarriersDelegate;
        
        private System.Threading.SendOrPostCallback ongetBankRecordCarriersCompletedDelegate;
        
        private BeginOperationDelegate onBeginreadV3CarrierDelegate;
        
        private EndOperationDelegate onEndreadV3CarrierDelegate;
        
        private System.Threading.SendOrPostCallback onreadV3CarrierCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCopyfilesDelegate;
        
        private EndOperationDelegate onEndgetCopyfilesDelegate;
        
        private System.Threading.SendOrPostCallback ongetCopyfilesCompletedDelegate;
        
        public BankRecordCarrierClient() {
        }
        
        public BankRecordCarrierClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankRecordCarrierClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankRecordCarrierClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankRecordCarrierClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<generateSepaAuszahlungCompletedEventArgs> generateSepaAuszahlungCompleted;
        
        public event System.EventHandler<generateSepaEinzugCompletedEventArgs> generateSepaEinzugCompleted;
        
        public event System.EventHandler<getBankRecordCarriersCompletedEventArgs> getBankRecordCarriersCompleted;
        
        public event System.EventHandler<readV3CarrierCompletedEventArgs> readV3CarrierCompleted;
        
        public event System.EventHandler<getCopyfilesCompletedEventArgs> getCopyfilesCompleted;
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response generateSepaAuszahlung(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish) {
            return base.Channel.generateSepaAuszahlung(sessionToken, verstaendigtAm, neuErstellen, ish);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingenerateSepaAuszahlung(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingenerateSepaAuszahlung(sessionToken, verstaendigtAm, neuErstellen, ish, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgenerateSepaAuszahlung(System.IAsyncResult result) {
            return base.Channel.EndgenerateSepaAuszahlung(result);
        }
        
        private System.IAsyncResult OnBegingenerateSepaAuszahlung(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            System.DateTime verstaendigtAm = ((System.DateTime)(inValues[1]));
            string neuErstellen = ((string)(inValues[2]));
            string ish = ((string)(inValues[3]));
            return this.BegingenerateSepaAuszahlung(sessionToken, verstaendigtAm, neuErstellen, ish, callback, asyncState);
        }
        
        private object[] OnEndgenerateSepaAuszahlung(System.IAsyncResult result) {
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response retVal = this.EndgenerateSepaAuszahlung(result);
            return new object[] {
                    retVal};
        }
        
        private void OngenerateSepaAuszahlungCompleted(object state) {
            if ((this.generateSepaAuszahlungCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.generateSepaAuszahlungCompleted(this, new generateSepaAuszahlungCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void generateSepaAuszahlungAsync(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish) {
            this.generateSepaAuszahlungAsync(sessionToken, verstaendigtAm, neuErstellen, ish, null);
        }
        
        public void generateSepaAuszahlungAsync(string sessionToken, System.DateTime verstaendigtAm, string neuErstellen, string ish, object userState) {
            if ((this.onBegingenerateSepaAuszahlungDelegate == null)) {
                this.onBegingenerateSepaAuszahlungDelegate = new BeginOperationDelegate(this.OnBegingenerateSepaAuszahlung);
            }
            if ((this.onEndgenerateSepaAuszahlungDelegate == null)) {
                this.onEndgenerateSepaAuszahlungDelegate = new EndOperationDelegate(this.OnEndgenerateSepaAuszahlung);
            }
            if ((this.ongenerateSepaAuszahlungCompletedDelegate == null)) {
                this.ongenerateSepaAuszahlungCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngenerateSepaAuszahlungCompleted);
            }
            base.InvokeAsync(this.onBegingenerateSepaAuszahlungDelegate, new object[] {
                        sessionToken,
                        verstaendigtAm,
                        neuErstellen,
                        ish}, this.onEndgenerateSepaAuszahlungDelegate, this.ongenerateSepaAuszahlungCompletedDelegate, userState);
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response generateSepaEinzug(string sessionToken, System.DateTime monat) {
            return base.Channel.generateSepaEinzug(sessionToken, monat);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingenerateSepaEinzug(string sessionToken, System.DateTime monat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingenerateSepaEinzug(sessionToken, monat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgenerateSepaEinzug(System.IAsyncResult result) {
            return base.Channel.EndgenerateSepaEinzug(result);
        }
        
        private System.IAsyncResult OnBegingenerateSepaEinzug(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            System.DateTime monat = ((System.DateTime)(inValues[1]));
            return this.BegingenerateSepaEinzug(sessionToken, monat, callback, asyncState);
        }
        
        private object[] OnEndgenerateSepaEinzug(System.IAsyncResult result) {
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response retVal = this.EndgenerateSepaEinzug(result);
            return new object[] {
                    retVal};
        }
        
        private void OngenerateSepaEinzugCompleted(object state) {
            if ((this.generateSepaEinzugCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.generateSepaEinzugCompleted(this, new generateSepaEinzugCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void generateSepaEinzugAsync(string sessionToken, System.DateTime monat) {
            this.generateSepaEinzugAsync(sessionToken, monat, null);
        }
        
        public void generateSepaEinzugAsync(string sessionToken, System.DateTime monat, object userState) {
            if ((this.onBegingenerateSepaEinzugDelegate == null)) {
                this.onBegingenerateSepaEinzugDelegate = new BeginOperationDelegate(this.OnBegingenerateSepaEinzug);
            }
            if ((this.onEndgenerateSepaEinzugDelegate == null)) {
                this.onEndgenerateSepaEinzugDelegate = new EndOperationDelegate(this.OnEndgenerateSepaEinzug);
            }
            if ((this.ongenerateSepaEinzugCompletedDelegate == null)) {
                this.ongenerateSepaEinzugCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngenerateSepaEinzugCompleted);
            }
            base.InvokeAsync(this.onBegingenerateSepaEinzugDelegate, new object[] {
                        sessionToken,
                        monat}, this.onEndgenerateSepaEinzugDelegate, this.ongenerateSepaEinzugCompletedDelegate, userState);
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response getBankRecordCarriers(out string[] carriers, string sessionToken) {
            return base.Channel.getBankRecordCarriers(out carriers, sessionToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetBankRecordCarriers(string sessionToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetBankRecordCarriers(sessionToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgetBankRecordCarriers(out string[] carriers, System.IAsyncResult result) {
            return base.Channel.EndgetBankRecordCarriers(out carriers, result);
        }
        
        private System.IAsyncResult OnBegingetBankRecordCarriers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            return this.BegingetBankRecordCarriers(sessionToken, callback, asyncState);
        }
        
        private object[] OnEndgetBankRecordCarriers(System.IAsyncResult result) {
            string[] carriers = this.GetDefaultValueForInitialization<string[]>();
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response retVal = this.EndgetBankRecordCarriers(out carriers, result);
            return new object[] {
                    carriers,
                    retVal};
        }
        
        private void OngetBankRecordCarriersCompleted(object state) {
            if ((this.getBankRecordCarriersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getBankRecordCarriersCompleted(this, new getBankRecordCarriersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getBankRecordCarriersAsync(string sessionToken) {
            this.getBankRecordCarriersAsync(sessionToken, null);
        }
        
        public void getBankRecordCarriersAsync(string sessionToken, object userState) {
            if ((this.onBegingetBankRecordCarriersDelegate == null)) {
                this.onBegingetBankRecordCarriersDelegate = new BeginOperationDelegate(this.OnBegingetBankRecordCarriers);
            }
            if ((this.onEndgetBankRecordCarriersDelegate == null)) {
                this.onEndgetBankRecordCarriersDelegate = new EndOperationDelegate(this.OnEndgetBankRecordCarriers);
            }
            if ((this.ongetBankRecordCarriersCompletedDelegate == null)) {
                this.ongetBankRecordCarriersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetBankRecordCarriersCompleted);
            }
            base.InvokeAsync(this.onBegingetBankRecordCarriersDelegate, new object[] {
                        sessionToken}, this.onEndgetBankRecordCarriersDelegate, this.ongetBankRecordCarriersCompletedDelegate, userState);
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response readV3Carrier(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate) {
            return base.Channel.readV3Carrier(sessionToken, filename, type, copyfilename, accountingEntryDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginreadV3Carrier(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginreadV3Carrier(sessionToken, filename, type, copyfilename, accountingEntryDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndreadV3Carrier(System.IAsyncResult result) {
            return base.Channel.EndreadV3Carrier(result);
        }
        
        private System.IAsyncResult OnBeginreadV3Carrier(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            string filename = ((string)(inValues[1]));
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type = ((Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type)(inValues[2]));
            string copyfilename = ((string)(inValues[3]));
            System.DateTime accountingEntryDate = ((System.DateTime)(inValues[4]));
            return this.BeginreadV3Carrier(sessionToken, filename, type, copyfilename, accountingEntryDate, callback, asyncState);
        }
        
        private object[] OnEndreadV3Carrier(System.IAsyncResult result) {
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response retVal = this.EndreadV3Carrier(result);
            return new object[] {
                    retVal};
        }
        
        private void OnreadV3CarrierCompleted(object state) {
            if ((this.readV3CarrierCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.readV3CarrierCompleted(this, new readV3CarrierCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void readV3CarrierAsync(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate) {
            this.readV3CarrierAsync(sessionToken, filename, type, copyfilename, accountingEntryDate, null);
        }
        
        public void readV3CarrierAsync(string sessionToken, string filename, Addit.AK.WBD.AK_Suche.BankRecordCarrier.V3Type type, string copyfilename, System.DateTime accountingEntryDate, object userState) {
            if ((this.onBeginreadV3CarrierDelegate == null)) {
                this.onBeginreadV3CarrierDelegate = new BeginOperationDelegate(this.OnBeginreadV3Carrier);
            }
            if ((this.onEndreadV3CarrierDelegate == null)) {
                this.onEndreadV3CarrierDelegate = new EndOperationDelegate(this.OnEndreadV3Carrier);
            }
            if ((this.onreadV3CarrierCompletedDelegate == null)) {
                this.onreadV3CarrierCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnreadV3CarrierCompleted);
            }
            base.InvokeAsync(this.onBeginreadV3CarrierDelegate, new object[] {
                        sessionToken,
                        filename,
                        type,
                        copyfilename,
                        accountingEntryDate}, this.onEndreadV3CarrierDelegate, this.onreadV3CarrierCompletedDelegate, userState);
        }
        
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response getCopyfiles(out string[] copies, string sessionToken) {
            return base.Channel.getCopyfiles(out copies, sessionToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCopyfiles(string sessionToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCopyfiles(sessionToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response EndgetCopyfiles(out string[] copies, System.IAsyncResult result) {
            return base.Channel.EndgetCopyfiles(out copies, result);
        }
        
        private System.IAsyncResult OnBegingetCopyfiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            return this.BegingetCopyfiles(sessionToken, callback, asyncState);
        }
        
        private object[] OnEndgetCopyfiles(System.IAsyncResult result) {
            string[] copies = this.GetDefaultValueForInitialization<string[]>();
            Addit.AK.WBD.AK_Suche.BankRecordCarrier.Response retVal = this.EndgetCopyfiles(out copies, result);
            return new object[] {
                    copies,
                    retVal};
        }
        
        private void OngetCopyfilesCompleted(object state) {
            if ((this.getCopyfilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCopyfilesCompleted(this, new getCopyfilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCopyfilesAsync(string sessionToken) {
            this.getCopyfilesAsync(sessionToken, null);
        }
        
        public void getCopyfilesAsync(string sessionToken, object userState) {
            if ((this.onBegingetCopyfilesDelegate == null)) {
                this.onBegingetCopyfilesDelegate = new BeginOperationDelegate(this.OnBegingetCopyfiles);
            }
            if ((this.onEndgetCopyfilesDelegate == null)) {
                this.onEndgetCopyfilesDelegate = new EndOperationDelegate(this.OnEndgetCopyfiles);
            }
            if ((this.ongetCopyfilesCompletedDelegate == null)) {
                this.ongetCopyfilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCopyfilesCompleted);
            }
            base.InvokeAsync(this.onBegingetCopyfilesDelegate, new object[] {
                        sessionToken}, this.onEndgetCopyfilesDelegate, this.ongetCopyfilesCompletedDelegate, userState);
        }
    }
}
